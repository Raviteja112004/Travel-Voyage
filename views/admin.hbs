<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Add Toastr CSS and JS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* Dropdown styling */
        .dropdown {
            position: relative;
        }
        
        .dropdown-menu {
            min-width: 10rem;
            right: 0;
        }
        
        /* Add some spacing between table rows */
        tbody tr {
            transition: background-color 0.2s;
        }
        
        tbody tr:hover {
            background-color: rgba(243, 244, 246, 0.5);
        }
        
        /* Modal animations */
        .modal-enter {
            opacity: 0;
        }
        
        .modal-enter-active {
            opacity: 1;
            transition: opacity 300ms;
        }
        
        .modal-exit {
            opacity: 1;
        }
        
        .modal-exit-active {
            opacity: 0;
            transition: opacity 300ms;
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Admin Navigation -->
    <nav class="bg-blue-600 text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center">
                    <span class="text-xl font-bold">Admin Dashboard</span>
                </div>
                <div class="flex items-center space-x-4">
                    <span>Welcome, {{adminUsername}}</span>
                    <a href="/admin/logout" class="bg-red-500 px-4 py-2 rounded hover:bg-red-600">Logout</a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Dashboard Content -->
    <div class="max-w-7xl mx-auto px-4 py-6">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-blue-100 rounded-full">
                        <i class="fas fa-users text-blue-600"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-gray-500 text-sm">Total Customers</h3>
                        <p class="text-2xl font-bold">{{stats.userCount}}</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-green-100 rounded-full">
                        <i class="fas fa-suitcase text-green-600"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-gray-500 text-sm">Total Packages</h3>
                        <p class="text-2xl font-bold">{{stats.packageCount}}</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-yellow-100 rounded-full">
                        <i class="fas fa-calendar-check text-yellow-600"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-gray-500 text-sm">Total Bookings</h3>
                        <p class="text-2xl font-bold">{{stats.bookingCount}}</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 bg-purple-100 rounded-full">
                        <i class="fas fa-hotel text-purple-600"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-gray-500 text-sm">Total Hotels</h3>
                        <p class="text-2xl font-bold">{{stats.hotelCount}}</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabs -->
        <div class="bg-white rounded-lg shadow mb-6">
            <div class="border-b">
                <nav class="-mb-px flex">
                    <button onclick="showTab('customers')" class="tab-btn w-1/4 py-4 px-6 text-center border-b-2 font-medium text-sm">
                        Customers
                    </button>
                    <button onclick="showTab('bookings')" class="tab-btn w-1/4 py-4 px-6 text-center border-b-2 font-medium text-sm">
                        Bookings
                    </button>
                    <button onclick="showTab('packages')" class="tab-btn w-1/4 py-4 px-6 text-center border-b-2 font-medium text-sm">
                        Packages
                    </button>
                    <button onclick="showTab('hotels')" class="tab-btn w-1/4 py-4 px-6 text-center border-b-2 font-medium text-sm">
                        Hotels
                    </button>
                </nav>
            </div>

            <!-- Tab Contents -->
            <div class="p-6">
                <!-- Customers Tab -->
                <div id="customers-tab" class="tab-content">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold">Customer List</h2>
                        <input type="text" id="customer-search" placeholder="Search customers..." class="px-4 py-2 border rounded">
                    </div>
                    
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">EMAIL</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">PHONE</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ACTIONS</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                {{#each customers}}
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap">{{this.Email}}</td>
                                    <td class="px-6 py-4 whitespace-nowrap">{{this.MobileNumber}}</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-right">
                                        <button onclick="viewCustomer({{this.User_id}}, '{{this.Email}}')" class="text-blue-600 hover:text-blue-900">
                                            View
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Bookings Tab -->
                <div id="bookings-tab" class="tab-content hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold">Booking List</h2>
                        <div class="flex space-x-2">
                            <select class="px-4 py-2 border rounded" id="booking-status-filter">
                                <option value="all">All Status</option>
                                <option value="Pending">Pending</option>
                                <option value="Confirmed">Confirmed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                            <input type="text" id="booking-search" placeholder="Search bookings..." class="px-4 py-2 border rounded">
                        </div>
                    </div>
                    
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead>
                                <tr class="bg-gray-50">
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Booking ID</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Package</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Customer Email</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white" id="booking-table-body">
                                {{#if bookings.length}}
                                    {{#each bookings}}
                                    <tr class="border-t">
                                        <td class="px-6 py-4">#{{this.BookingID}}</td>
                                        <td class="px-6 py-4">{{this.PackageName}}</td>
                                        <td class="px-6 py-4">{{this.UserEmail}}</td>
                                        <td class="px-6 py-4">{{this.FromDate}}</td>
                                        <td class="px-6 py-4">
                                            <span class="px-2 py-1 rounded text-sm 
                                                {{#if (eq this.Status 'Confirmed')}}bg-green-100 text-green-800{{/if}}
                                                {{#if (eq this.Status 'Pending')}}bg-yellow-100 text-yellow-800{{/if}}
                                                {{#if (eq this.Status 'Cancelled')}}bg-red-100 text-red-800{{/if}}
                                            ">
                                                {{this.Status}}
                                            </span>
                                        </td>
                                        <td class="px-6 py-4">
                                            <button onclick="viewBookingDetails({{this.BookingID}})" class="text-blue-600 hover:text-blue-800 mr-2">View</button>
                                            <div class="dropdown inline-block relative">
                                                <button class="text-green-600 hover:text-green-800">Update Status</button>
                                                <div class="dropdown-menu absolute hidden bg-white shadow-lg mt-1 rounded z-10">
                                                    <a href="#" onclick="updateBookingStatus({{this.BookingID}}, 'Confirmed'); return false;" class="block px-4 py-2 text-sm text-green-700 hover:bg-green-100">Confirm</a>
                                                    <a href="#" onclick="updateBookingStatus({{this.BookingID}}, 'Pending'); return false;" class="block px-4 py-2 text-sm text-yellow-700 hover:bg-yellow-100">Pending</a>
                                                    <a href="#" onclick="updateBookingStatus({{this.BookingID}}, 'Cancelled'); return false;" class="block px-4 py-2 text-sm text-red-700 hover:bg-red-100">Cancel</a>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                    {{/each}}
                                {{else}}
                                    <tr class="border-t">
                                        <td colspan="6" class="px-6 py-4 text-center text-gray-500">No bookings found</td>
                                    </tr>
                                {{/if}}
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Packages Tab -->
                <div id="packages-tab" class="tab-content hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold">Package List</h2>
                        <div class="flex space-x-2">
                            <button onclick="showPackageModal()" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                                Add New Package
                            </button>
                            <input type="text" placeholder="Search packages..." class="px-4 py-2 border rounded">
                        </div>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead>
                                <tr class="bg-gray-50">
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Location</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Price</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Duration</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white">
                                {{#each packages}}
                                <tr class="border-t">
                                    <td class="px-6 py-4">{{this.PackageName}}</td>
                                    <td class="px-6 py-4">{{this.PackageLocation}}</td>
                                    <td class="px-6 py-4">₹{{this.PackagePrice}}</td>
                                    <td class="px-6 py-4">{{this.Duration}} days</td>
                                    <td class="px-6 py-4">
                                        <button onclick="editPackage('{{this.PackageId}}', '{{this.PackageName}}', '{{this.PackageLocation}}', '{{this.PackagePrice}}', '{{this.Duration}}', '{{this.Description}}', '{{this.PackageImage}}')" class="text-blue-600 hover:text-blue-800 mr-2">Edit</button>
                                        <button onclick="confirmDeletePackage({{this.PackageId}})" class="text-red-600 hover:text-red-800">Delete</button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Hotels Tab -->
                <div id="hotels-tab" class="tab-content hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold">Hotel List</h2>
                        <div class="flex space-x-2">
                            <button onclick="showHotelModal()" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                                Add New Hotel
                            </button>
                            <input type="text" id="hotel-search" placeholder="Search hotels..." class="px-4 py-2 border rounded">
                        </div>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead>
                                <tr class="bg-gray-50">
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Location</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Price/Night</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Rating</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white" id="hotel-table-body">
                                {{#if hotels.length}}
                                    {{#each hotels}}
                                    <tr class="border-t">
                                        <td class="px-6 py-4">{{this.HotelName}}</td>
                                        <td class="px-6 py-4">{{this.HotelLocation}}</td>
                                        <td class="px-6 py-4">₹{{this.PricePerNight}}</td>
                                        <td class="px-6 py-4">{{this.Ratings}}/5</td>
                                        <td class="px-6 py-4">
                                            <button onclick="editHotel({{this.Hotel_id}}, '{{this.HotelName}}', '{{this.HotelLocation}}', {{this.PricePerNight}}, {{this.Ratings}}, '{{this.Description}}', '{{this.HotelImage}}', '{{this.Amenities}}')" class="text-blue-600 hover:text-blue-800 mr-2">Edit</button>
                                            <button onclick="confirmDeleteHotel({{this.Hotel_id}})" class="text-red-600 hover:text-red-800">Delete</button>
                                        </td>
                                    </tr>
                                    {{/each}}
                                {{else}}
                                    <tr class="border-t">
                                        <td colspan="5" class="px-6 py-4 text-center text-gray-500">No hotels found</td>
                                    </tr>
                                {{/if}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Package Modal for Add/Edit -->
    <div id="packageModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl mx-4">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold" id="packageModalTitle">Add New Package</h3>
                    <button onclick="closePackageModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="packageForm">
                    <input type="hidden" id="packageId" name="packageId">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Package Name</label>
                            <input type="text" id="packageName" name="packageName" class="w-full px-3 py-2 border rounded" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                            <input type="text" id="packageLocation" name="packageLocation" class="w-full px-3 py-2 border rounded" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Price</label>
                            <input type="number" id="packagePrice" name="packagePrice" class="w-full px-3 py-2 border rounded" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Duration (days)</label>
                            <input type="number" id="packageDuration" name="packageDuration" class="w-full px-3 py-2 border rounded" required>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea id="packageDescription" name="packageDescription" rows="4" class="w-full px-3 py-2 border rounded" required></textarea>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Image URL</label>
                        <input type="text" id="packageImage" name="packageImage" class="w-full px-3 py-2 border rounded" required>
                    </div>
                    <div class="flex justify-end">
                        <button type="button" onclick="closePackageModal()" class="px-4 py-2 text-gray-700 border rounded mr-2">Cancel</button>
                        <button type="button" onclick="savePackage()" class="px-4 py-2 bg-blue-600 text-white rounded">Save Package</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteConfirmModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md mx-4">
            <div class="p-6">
                <h3 class="text-xl font-bold mb-4">Confirm Deletion</h3>
                <p class="mb-6">Are you sure you want to delete this package? This action cannot be undone.</p>
                <input type="hidden" id="deletePackageId">
                <div class="flex justify-end">
                    <button onclick="closeDeleteModal()" class="px-4 py-2 text-gray-700 border rounded mr-2">Cancel</button>
                    <button onclick="deletePackage()" class="px-4 py-2 bg-red-600 text-white rounded">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Hotel Modal for Add/Edit -->
    <div id="hotelModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl mx-4">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold" id="hotelModalTitle">Add New Hotel</h3>
                    <button onclick="closeHotelModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="hotelForm">
                    <input type="hidden" id="hotelId" name="hotelId">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Hotel Name</label>
                            <input type="text" id="hotelName" name="hotelName" class="w-full px-3 py-2 border rounded" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                            <input type="text" id="hotelLocation" name="hotelLocation" class="w-full px-3 py-2 border rounded" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Price Per Night</label>
                            <input type="number" id="pricePerNight" name="pricePerNight" class="w-full px-3 py-2 border rounded" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Rating (1-5)</label>
                            <input type="number" id="ratings" name="ratings" min="1" max="5" step="0.1" class="w-full px-3 py-2 border rounded" required>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea id="hotelDescription" name="hotelDescription" rows="3" class="w-full px-3 py-2 border rounded" required></textarea>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Image URL</label>
                        <input type="text" id="hotelImage" name="hotelImage" class="w-full px-3 py-2 border rounded" required>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Amenities (comma-separated)</label>
                        <input type="text" id="amenities" name="amenities" class="w-full px-3 py-2 border rounded" required placeholder="WiFi, AC, Pool, Gym">
                    </div>
                    <div class="flex justify-end">
                        <button type="button" onclick="closeHotelModal()" class="px-4 py-2 text-gray-700 border rounded mr-2">Cancel</button>
                        <button type="button" onclick="saveHotel()" class="px-4 py-2 bg-blue-600 text-white rounded">Save Hotel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Hotel Confirmation Modal -->
    <div id="deleteHotelModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md mx-4">
            <div class="p-6">
                <h3 class="text-xl font-bold mb-4">Confirm Deletion</h3>
                <p class="mb-6">Are you sure you want to delete this hotel? This action cannot be undone.</p>
                <input type="hidden" id="deleteHotelId">
                <div class="flex justify-end">
                    <button onclick="closeDeleteHotelModal()" class="px-4 py-2 text-gray-700 border rounded mr-2">Cancel</button>
                    <button onclick="deleteHotel()" class="px-4 py-2 bg-red-600 text-white rounded">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Booking Details Modal -->
    <div id="bookingDetailsModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-3xl mx-4">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold">Booking Details</h3>
                    <button onclick="closeBookingDetailsModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="bookingDetailsContent" class="space-y-4">
                    <div class="flex flex-col md:flex-row gap-6">
                        <!-- Loader - Will be replaced with content -->
                        <div class="text-center py-10 w-full">
                            <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto"></div>
                            <p class="mt-2 text-gray-500">Loading booking details...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Tab switching functionality
        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.add('hidden');
            });
            
            // Show selected tab content
            document.getElementById(tabName + '-tab').classList.remove('hidden');
            
            // Update tab button styles
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('border-blue-500', 'text-blue-600');
                btn.classList.add('border-transparent', 'text-gray-500');
            });
            
            // Style active tab button
            event.target.classList.remove('border-transparent', 'text-gray-500');
            event.target.classList.add('border-blue-500', 'text-blue-600');
        }

        // Initialize toastr
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        };

        // Show success message for login
        toastr.success("Admin login successful!");

        // Default to showing customers tab
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Customers count:', {{customers.length}});
            {{#if customers.length}}
                console.log('First customer:', {
                    {{#with customers.[0]}}
                        {{#each this}}
                            '{{@key}}': '{{this}}',
                        {{/each}}
                    {{/with}}
                });
            {{/if}}
            
            console.log('Bookings count:', {{bookings.length}});
            {{#if bookings.length}}
                console.log('First booking:', {
                    {{#with bookings.[0]}}
                        {{#each this}}
                            '{{@key}}': '{{this}}',
                        {{/each}}
                    {{/with}}
                });
            {{/if}}
            
            // Show the customers tab by default
            showTab('customers');
        });

        // Package modal functions
        function showPackageModal(isEdit = false) {
            document.getElementById('packageModalTitle').textContent = isEdit ? 'Edit Package' : 'Add New Package';
            document.getElementById('packageModal').classList.remove('hidden');
            document.getElementById('packageModal').classList.add('flex');
        }
        
        function closePackageModal() {
            document.getElementById('packageModal').classList.add('hidden');
            document.getElementById('packageModal').classList.remove('flex');
            document.getElementById('packageForm').reset();
        }
        
        function editPackage(id, name, location, price, duration, description, image) {
            document.getElementById('packageId').value = id;
            document.getElementById('packageName').value = name;
            document.getElementById('packageLocation').value = location;
            document.getElementById('packagePrice').value = price;
            document.getElementById('packageDuration').value = duration;
            document.getElementById('packageDescription').value = description;
            document.getElementById('packageImage').value = image;
            
            showPackageModal(true);
        }
        
        function savePackage() {
            const packageId = document.getElementById('packageId').value;
            const packageData = {
                packageName: document.getElementById('packageName').value,
                packageLocation: document.getElementById('packageLocation').value,
                packagePrice: document.getElementById('packagePrice').value,
                packageDuration: document.getElementById('packageDuration').value,
                packageDescription: document.getElementById('packageDescription').value,
                packageImage: document.getElementById('packageImage').value
            };
            
            const url = packageId ? `/admin/packages/${packageId}` : '/admin/packages';
            const method = packageId ? 'PUT' : 'POST';
            
            // Show loading indicator
            toastr.info('Processing your request...');
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(packageData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    toastr.success(packageId ? 'Package updated successfully!' : 'Package added successfully!');
                    closePackageModal();
                    // Reload page to see changes
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    toastr.error(data.message || 'An error occurred');
                    console.error('Error details:', data);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('An error occurred while saving the package');
            });
        }
        
        function confirmDeletePackage(id) {
            document.getElementById('deletePackageId').value = id;
            document.getElementById('deleteConfirmModal').classList.remove('hidden');
            document.getElementById('deleteConfirmModal').classList.add('flex');
        }
        
        function closeDeleteModal() {
            document.getElementById('deleteConfirmModal').classList.add('hidden');
            document.getElementById('deleteConfirmModal').classList.remove('flex');
        }
        
        function deletePackage() {
            const packageId = document.getElementById('deletePackageId').value;
            
            // Show a loading message
            toastr.info('Deleting package...');
            
            fetch(`/admin/packages/${packageId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    toastr.success('Package deleted successfully!');
                    closeDeleteModal();
                    // Reload page to see changes
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    toastr.error(data.message || 'An error occurred');
                    console.error('Delete error:', data.message);
                    closeDeleteModal();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('An error occurred while deleting the package');
                closeDeleteModal();
            });
        }
        
        // Booking status update function
        function updateBookingStatus(bookingId, status) {
            fetch(`/admin/bookings/${bookingId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    toastr.success(`Booking status updated to ${status}`);
                    // Reload page to see changes
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    toastr.error(data.message || 'An error occurred');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('An error occurred while updating booking status');
            });
        }
        
        // Dropdown menu functionality
        document.addEventListener('click', function(e) {
            if (e.target && e.target.parentNode && e.target.parentNode.classList.contains('dropdown')) {
                const dropdown = e.target.nextElementSibling;
                dropdown.classList.toggle('hidden');
            } else {
                document.querySelectorAll('.dropdown-menu').forEach(menu => {
                    menu.classList.add('hidden');
                });
            }
        });
        
        // Filter bookings by status
        document.getElementById('booking-status-filter').addEventListener('change', function() {
            const status = this.value;
            const rows = document.querySelectorAll('#booking-table-body tr');
            
            rows.forEach(row => {
                const statusCell = row.querySelector('td:nth-child(6)');
                if (status === 'all' || statusCell.textContent.trim() === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // Update customer search to work without name column
        document.getElementById('customer-search').addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('#customer-table-body tr');
            
            rows.forEach(row => {
                if (row.cells.length <= 1) return; // Skip the "No customers found" row
                
                const email = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
                const phone = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                
                if (email.includes(searchTerm) || phone.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
        
        document.getElementById('booking-search').addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('#booking-table-body tr');
            
            rows.forEach(row => {
                if (row.cells.length <= 1) return; // Skip the "No bookings found" row
                
                const id = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
                const packageName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                const customerName = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                const email = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
                
                if (id.includes(searchTerm) || packageName.includes(searchTerm) || 
                    customerName.includes(searchTerm) || email.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
        
        // Debug info to help troubleshoot
        console.log('Customers: ', {{#if customers}}{{customers.length}}{{else}}0{{/if}});
        console.log('Bookings: ', {{#if bookings}}{{bookings.length}}{{else}}0{{/if}});
        console.log('Packages: ', {{#if packages}}{{packages.length}}{{else}}0{{/if}});
        console.log('Hotels: ', {{#if hotels}}{{hotels.length}}{{else}}0{{/if}});

        // Hotel modal functions
        function showHotelModal(isEdit = false) {
            document.getElementById('hotelModalTitle').textContent = isEdit ? 'Edit Hotel' : 'Add New Hotel';
            document.getElementById('hotelModal').classList.remove('hidden');
            document.getElementById('hotelModal').classList.add('flex');
        }
        
        function closeHotelModal() {
            document.getElementById('hotelModal').classList.add('hidden');
            document.getElementById('hotelModal').classList.remove('flex');
            document.getElementById('hotelForm').reset();
        }
        
        function editHotel(id, name, location, price, rating, description, image, amenities) {
            document.getElementById('hotelId').value = id;
            document.getElementById('hotelName').value = name;
            document.getElementById('hotelLocation').value = location;
            document.getElementById('pricePerNight').value = price;
            document.getElementById('ratings').value = rating;
            document.getElementById('hotelDescription').value = description || '';
            document.getElementById('hotelImage').value = image || '';
            document.getElementById('amenities').value = amenities || '';
            
            showHotelModal(true);
        }
        
        function saveHotel() {
            const hotelId = document.getElementById('hotelId').value;
            const hotelData = {
                hotelName: document.getElementById('hotelName').value,
                hotelLocation: document.getElementById('hotelLocation').value,
                pricePerNight: document.getElementById('pricePerNight').value,
                ratings: document.getElementById('ratings').value,
                description: document.getElementById('hotelDescription').value,
                hotelImage: document.getElementById('hotelImage').value,
                amenities: document.getElementById('amenities').value
            };
            
            // Validate fields
            if (!hotelData.hotelName || !hotelData.hotelLocation || !hotelData.pricePerNight || !hotelData.ratings) {
                toastr.error('Please fill in all required fields');
                return;
            }
            
            const url = hotelId ? `/admin/hotels/${hotelId}` : '/admin/hotels';
            const method = hotelId ? 'PUT' : 'POST';
            
            // Show loading indicator
            toastr.info('Processing your request...');
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(hotelData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    toastr.success(hotelId ? 'Hotel updated successfully!' : 'Hotel added successfully!');
                    closeHotelModal();
                    // Reload page to see changes
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    toastr.error(data.message || 'An error occurred');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('An error occurred while saving the hotel');
            });
        }
        
        function confirmDeleteHotel(id) {
            document.getElementById('deleteHotelId').value = id;
            document.getElementById('deleteHotelModal').classList.remove('hidden');
            document.getElementById('deleteHotelModal').classList.add('flex');
        }
        
        function closeDeleteHotelModal() {
            document.getElementById('deleteHotelModal').classList.add('hidden');
            document.getElementById('deleteHotelModal').classList.remove('flex');
        }
        
        function deleteHotel() {
            const hotelId = document.getElementById('deleteHotelId').value;
            
            // Show loading message
            toastr.info('Deleting hotel...');
            
            fetch(`/admin/hotels/${hotelId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    toastr.success('Hotel deleted successfully!');
                    closeDeleteHotelModal();
                    // Reload page to see changes
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    toastr.error(data.message || 'An error occurred');
                    console.error('Delete error:', data.message);
                    closeDeleteHotelModal();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('An error occurred while deleting the hotel');
                closeDeleteHotelModal();
            });
        }
        
        // Add hotel search functionality
        document.getElementById('hotel-search').addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('#hotel-table-body tr');
            
            rows.forEach(row => {
                if (row.cells.length <= 1) return; // Skip the "No hotels found" row
                
                const name = row.cells[0].textContent.toLowerCase();
                const location = row.cells[1].textContent.toLowerCase();
                
                if (name.includes(searchTerm) || location.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // Booking details modal functions
        function viewBookingDetails(bookingId) {
            // Show modal
            document.getElementById('bookingDetailsModal').classList.remove('hidden');
            document.getElementById('bookingDetailsModal').classList.add('flex');
            
            // Fetch booking details
            fetch(`/admin/bookings/${bookingId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Create the content HTML
                        let contentHTML = `
                        <div class="flex flex-col md:flex-row gap-6">
                            <!-- Package Info -->
                            <div class="md:w-1/2">
                                <h4 class="font-semibold text-lg mb-2">Package Information</h4>
                                <div class="bg-gray-50 p-4 rounded">
                                    <p><strong>Package:</strong> ${data.package.PackageName}</p>
                                    <p><strong>Location:</strong> ${data.package.PackageLocation}</p>
                                    <p><strong>Duration:</strong> ${data.package.Duration} days</p>
                                    <p><strong>Price:</strong> ₹${data.package.PackagePrice}</p>
                                </div>
                            </div>
                            <!-- Customer & Booking Info -->
                            <div class="md:w-1/2">
                                <h4 class="font-semibold text-lg mb-2">Booking Information</h4>
                                <div class="bg-gray-50 p-4 rounded">
                                    <p><strong>Customer:</strong> ${data.booking.UserEmail}</p>
                                    <p><strong>Travel Dates:</strong> ${formatDate(data.booking.FromDate)} to ${formatDate(data.booking.ToDate)}</p>
                                    <p><strong>Guests:</strong> ${data.booking.NumberOfPeople}</p>
                                    <p><strong>Status:</strong> <span class="px-2 py-1 rounded text-sm inline-block ${getStatusClasses(data.booking.Status)}">${data.booking.Status}</span></p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="mt-6 flex flex-wrap gap-2 justify-end">`;
                        
                        // Add appropriate action buttons based on status
                        if (data.booking.Status === 'Pending') {
                            contentHTML += `
                                <button onclick="updateBookingStatus(${data.booking.BookingID}, 'Confirmed')" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">Confirm Booking</button>
                                <button onclick="updateBookingStatus(${data.booking.BookingID}, 'Cancelled')" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Cancel Booking</button>
                            `;
                        } else if (data.booking.Status === 'Confirmed') {
                            contentHTML += `
                                <button onclick="updateBookingStatus(${data.booking.BookingID}, 'Cancelled')" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Cancel Booking</button>
                            `;
                        } else if (data.booking.Status === 'Cancelled') {
                            contentHTML += `
                                <button onclick="deleteBooking(${data.booking.BookingID})" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Delete Booking</button>
                            `;
                        }
                        
                        contentHTML += `
                            <button onclick="closeBookingDetailsModal()" class="px-4 py-2 border text-gray-700 rounded hover:bg-gray-100">Close</button>
                        </div>`;
                        
                        // Set the content
                        document.getElementById('bookingDetailsContent').innerHTML = contentHTML;
                    } else {
                        document.getElementById('bookingDetailsContent').innerHTML = `
                            <div class="text-center py-10">
                                <p class="text-red-500">Error: ${data.message || 'Could not load booking details'}</p>
                                <button onclick="closeBookingDetailsModal()" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Close</button>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('bookingDetailsContent').innerHTML = `
                        <div class="text-center py-10">
                            <p class="text-red-500">Error loading booking details. Please try again.</p>
                            <button onclick="closeBookingDetailsModal()" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Close</button>
                        </div>
                    `;
                });
        }
        
        function closeBookingDetailsModal() {
            document.getElementById('bookingDetailsModal').classList.add('hidden');
            document.getElementById('bookingDetailsModal').classList.remove('flex');
        }
        
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
        }
        
        function getStatusClasses(status) {
            if (status === 'Confirmed') return 'bg-green-100 text-green-800';
            if (status === 'Pending') return 'bg-yellow-100 text-yellow-800';
            if (status === 'Cancelled') return 'bg-red-100 text-red-800';
            return '';
        }
        
        // Delete booking function
        function deleteBooking(bookingId) {
            if (!confirm('Are you sure you want to delete this booking? This action cannot be undone.')) {
                return;
            }
            
            fetch(`/admin/bookings/${bookingId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    toastr.success('Booking deleted successfully!');
                    closeBookingDetailsModal();
                    // Reload page to see changes
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    toastr.error(data.message || 'An error occurred');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('An error occurred while deleting the booking');
            });
        }

        // Simple modal helper functions
        function createModal(content) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50';
            modal.id = 'admin-modal';
            modal.innerHTML = content;
            document.body.appendChild(modal);
            return modal;
        }
        
        function closeModal() {
            const modal = document.getElementById('admin-modal');
            if (modal) modal.remove();
        }
        
        // When the "View" button is clicked for a customer
        function viewCustomer(userId, email) {
            console.log("Viewing customer:", userId, email);
            
            // Create the initial modal
            const modalContent = `
              <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-4xl mx-4 max-h-screen overflow-auto">
                <div class="flex justify-between items-center mb-4">
                  <h3 class="text-lg font-bold">Customer Details: ${email}</h3>
                  <button onclick="closeModal()" class="text-gray-400 hover:text-gray-500">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                
                <div class="mb-4">
                  <h4 class="text-md font-semibold mb-2">Customer Enquiries</h4>
                  <div id="customer-enquiries" class="bg-gray-50 p-4 rounded">
                    <p class="text-center text-gray-500">Loading enquiries...</p>
                  </div>
                </div>
                
                <div class="flex justify-end">
                  <button onclick="closeModal()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Close</button>
                </div>
              </div>
            `;
            
            createModal(modalContent);
            
            // Fetch the customer's enquiries
            fetch('/admin/api/customer/' + userId + '/enquiries')
              .then(response => {
                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }
                return response.json();
              })
              .then(data => {
                console.log("Enquiries data:", data);
                const enquiriesContainer = document.getElementById('customer-enquiries');
                
                if (data.success && data.enquiries && data.enquiries.length > 0) {
                  // Build a table of enquiries
                  let enquiriesHtml = `
                    <table class="min-w-full divide-y divide-gray-200">
                      <thead class="bg-gray-50">
                        <tr>
                          <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Subject</th>
                          <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Description</th>
                          <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Reply Status</th>
                          <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                        </tr>
                      </thead>
                      <tbody class="bg-white divide-y divide-gray-200">
                  `;
                  
                  data.enquiries.forEach(enquiry => {
                    enquiriesHtml += `
                      <tr>
                        <td class="px-4 py-2 whitespace-nowrap text-sm">${enquiry.Subject || 'N/A'}</td>
                        <td class="px-4 py-2 text-sm">${enquiry.Description ? (enquiry.Description.length > 50 ? enquiry.Description.substring(0, 50) + '...' : enquiry.Description) : 'N/A'}</td>
                        <td class="px-4 py-2 whitespace-nowrap">
                          <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full 
                            ${enquiry.AdminReply ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                            ${enquiry.AdminReply ? 'Replied' : 'Awaiting Reply'}
                          </span>
                        </td>
                        <td class="px-4 py-2 whitespace-nowrap text-sm">
                          <button onclick="viewEnquiryDetail(${enquiry.EnquiryID})" class="text-blue-600 hover:text-blue-900 mr-3">
                            <i class="fas fa-eye"></i> View
                          </button>
                          ${!enquiry.AdminReply ? 
                            `<button onclick="showReplyForm(${enquiry.EnquiryID})" class="text-green-600 hover:text-green-700">
                              <i class="fas fa-reply"></i> Reply
                            </button>` 
                            : ''}
                        </td>
                      </tr>
                    `;
                  });
                  
                  enquiriesHtml += `
                      </tbody>
                    </table>
                  `;
                  
                  enquiriesContainer.innerHTML = enquiriesHtml;
                } else {
                  enquiriesContainer.innerHTML = '<p class="text-center text-gray-500">No enquiries found for this customer.</p>';
                }
              })
              .catch(error => {
                console.error('Error fetching enquiries:', error);
                const enquiriesContainer = document.getElementById('customer-enquiries');
                if (enquiriesContainer) {
                  enquiriesContainer.innerHTML = '<p class="text-center text-red-500">Error loading enquiries. Please try again.</p>';
                }
              });
        }
        
        // View a specific enquiry's details
        function viewEnquiryDetail(enquiryId) {
            console.log("Viewing enquiry:", enquiryId);
            
            // Close the current modal
            closeModal();
            
            // Fetch the enquiry details
            fetch('/admin/api/enquiry/' + enquiryId)
              .then(response => {
                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }
                return response.json();
              })
              .then(data => {
                console.log("Enquiry data:", data);
                
                if (data.success && data.enquiry) {
                  const enquiry = data.enquiry;
                  
                  // Create a new modal with the enquiry details
                  const detailContent = `
                    <div class="bg-white rounded-lg shadow-xl p-6 max-w-lg w-full">
                      <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-bold">Enquiry Details</h3>
                        <button onclick="closeModal()" class="text-gray-500">
                          <i class="fas fa-times"></i>
                        </button>
                      </div>
                      <div class="mb-4">
                        <div class="mb-3">
                          <h4 class="text-sm font-semibold text-gray-500">Subject</h4>
                          <p>${enquiry.Subject || 'N/A'}</p>
                        </div>
                        <div class="mb-3">
                          <h4 class="text-sm font-semibold text-gray-500">Email</h4>
                          <p>${enquiry.Email || 'N/A'}</p>
                        </div>
                        <div class="mb-3">
                          <h4 class="text-sm font-semibold text-gray-500">Description</h4>
                          <p>${enquiry.Description || 'N/A'}</p>
                        </div>
                        ${enquiry.AdminReply ? `
                        <div class="mb-3 p-3 bg-blue-50 rounded">
                          <h4 class="text-sm font-semibold text-blue-700">Admin Reply</h4>
                          <p>${enquiry.AdminReply}</p>
                        </div>
                        ` : ''}
                      </div>
                      <div class="flex justify-end">
                        ${!enquiry.AdminReply ? `
                        <button onclick="showReplyForm(${enquiry.EnquiryID})" class="bg-green-500 text-white px-4 py-2 rounded mr-2">
                          <i class="fas fa-reply"></i> Reply
                        </button>` : ''}
                        <button onclick="closeModal()" class="bg-gray-300 text-gray-700 px-4 py-2 rounded">
                          Close
                        </button>
                      </div>
                    </div>
                  `;
                    
                    createModal(detailContent);
                } else {
                  alert('Could not load enquiry details');
                }
              })
              .catch(error => {
                console.error('Error fetching enquiry details:', error);
                alert('An error occurred while loading enquiry details');
              });
        }
        
        // Show the reply form for an enquiry
        function showReplyForm(enquiryId) {
            console.log("Showing reply form for enquiry:", enquiryId);
            
            // Close the current modal
            closeModal();
            
            // Create a new modal with the reply form
            const replyFormContent = `
              <div class="bg-white rounded-lg shadow-xl p-6 max-w-lg w-full">
                <div class="flex justify-between items-center mb-4">
                  <h3 class="text-lg font-bold">Reply to Enquiry</h3>
                  <button onclick="closeModal()" class="text-gray-500">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                <div class="mb-4">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Your Reply</label>
                  <textarea id="reply-text" rows="5" class="w-full border border-gray-300 rounded-md p-2"></textarea>
                </div>
                <div class="flex justify-end">
                  <button onclick="closeModal()" class="bg-gray-300 text-gray-700 px-4 py-2 rounded mr-2">
                    Cancel
                  </button>
                  <button onclick="submitReply(${enquiryId})" class="bg-green-500 text-white px-4 py-2 rounded">
                    Send Reply
                  </button>
                </div>
              </div>
            `;
            
            createModal(replyFormContent);
        }
        
        // Submit a reply to an enquiry
        function submitReply(enquiryId) {
            const replyText = document.getElementById('reply-text').value;
            
            if (!replyText || replyText.trim() === '') {
                alert('Please enter a reply');
                return;
            }
            
            console.log("Submitting reply:", replyText);
            
            // Send the reply to the server
            fetch('/admin/api/enquiry/' + enquiryId + '/reply', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ reply: replyText })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log("Reply response:", data);
                
                if (data.success) {
                    alert('Reply sent successfully');
                    closeModal();
                    // Refresh the page to see the updated data
                    window.location.reload();
                } else {
                    alert('Failed to send reply: ' + (data.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error sending reply:', error);
                alert('An error occurred while sending your reply');
            });
        }
    </script>
</body>
</html> 